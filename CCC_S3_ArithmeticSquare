def is_arithmetic(line):
    return line[1] - line[0] == line[2] - line[1]

def valid(grid):
    for row in grid:
        if not is_arithmetic(row):
            return False
        
    for col in range(len(grid[0])):
        if not is_arithmetic(col):
            return False
    return True

def find_x(grid):
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == 'X':
                return (i, j)

def solve(grid):
    coords = find_x(grid)

    if not coords:
        return valid(grid) #check if all nums are in the correct order
    
    i, j = coords

    for val in range(-1000000, 1000001):
        grid[i][j] = val

        if solve(grid):
            return True
        else:
            grid[i][j] = 'X' #backtracking

    return False

line1 = input().split()
line2 = input().split()
line3 = input().split()

grid = [
    [int(x) if x != 'X' else 'X' for x in line1],
    [int(x) if x != 'X' else 'X' for x in line2],
    [int(x) if x != 'X' else 'X' for x in line3],
]

if solve(grid):
    print(grid[0][0], grid[0][1], grid[0][2])
    print(grid[1][0], grid[1][1], grid[1][2])
    print(grid[2][0], grid[2][1], grid[2][2])
else:
    print("No Solution Found")

"""
X X X 
X X X 
X X X

grid = [ [X, X, X], [X, X, X], [X, X, X] ]
"""
#fml